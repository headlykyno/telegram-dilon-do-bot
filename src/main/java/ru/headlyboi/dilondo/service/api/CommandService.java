package ru.headlyboi.dilondo.service.api;

import java.util.List;
import org.telegram.telegrambots.meta.api.methods.botapimethods.BotApiMethod;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.headlyboi.dilondo.enums.CommandEnum;

/**
 * Интерфейс для сервисов обработки команд Telegram бота.
 * 
 * <p>Каждый сервис, реализующий этот интерфейс, отвечает за обработку
 * конкретного типа команды. Сервисы используются для разделения логики
 * обработки различных команд и обеспечения модульности кода.</p>
 * 
 * <p>Основные функции интерфейса:</p>
 * <ul>
 *   <li>Обработка обновлений от Telegram API</li>
 *   <li>Генерация ответных сообщений</li>
 *   <li>Определение типа команды</li>
 * </ul>
 */
public interface CommandService {

    /**
     * Обрабатывает обновление от Telegram API и генерирует ответные сообщения.
     * 
     * <p>Этот метод является основной точкой входа для обработки команд.
     * Он анализирует входящее обновление, выполняет необходимую бизнес-логику
     * и возвращает список сообщений для отправки пользователю.</p>
     *
     * @param update обновление от Telegram API, содержащее сообщение пользователя
     * @return список сообщений для отправки пользователю
     */
    List<BotApiMethod<?>> processDick(Update update);

    /**
     * Возвращает тип команды, который обрабатывает данный сервис.
     * 
     * <p>Этот метод используется для регистрации сервиса в карте команд
     * и определения, какой сервис должен обрабатывать конкретную команду.</p>
     *
     * @return тип команды, обрабатываемой данным сервисом
     */
    CommandEnum getCommand();
}
