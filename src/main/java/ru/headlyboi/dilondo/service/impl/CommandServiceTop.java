package ru.headlyboi.dilondo.service.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.botapimethods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendDice;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.headlyboi.dilondo.dto.ChatDto;
import ru.headlyboi.dilondo.enums.CommandEnum;
import ru.headlyboi.dilondo.mapper.DilondoMapper;
import ru.headlyboi.dilondo.repository.DilondoRepository;
import ru.headlyboi.dilondo.repository.model.TopEntity;
import ru.headlyboi.dilondo.service.api.CommandService;

import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "–¢–æ–ø" - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤.
 *
 * <p>–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:</p>
 * <ul>
 *   <li>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ –¥–ª–∏–Ω–µ –ø–µ–Ω–∏—Å–∞</li>
 *   <li>–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º</li>
 *   <li>–û—Ç–ø—Ä–∞–≤–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–∞–ª—å–Ω–æ–π –∫–æ—Å—Ç—å—é</li>
 * </ul>
 *
 * <p>–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü–æ–∑–∏—Ü–∏—è. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : –î–ª–∏–Ω–∞ —Å–º"
 * —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –º–µ—Å—Ç.</p>
 *
 */
@Service
@RequiredArgsConstructor
public class CommandServiceTop implements CommandService {

    private final DilondoMapper dilondoMapper;
    private final DilondoRepository dilondoRepository;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–¢–æ–ø" –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
     *
     * <p>–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</p>
     * <ol>
     *   <li>–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
     *   <li>–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–ª–∏–Ω–µ –ø–µ–Ω–∏—Å–∞</li>
     *   <li>–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º</li>
     *   <li>–°–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–∞–ª—å–Ω–æ–π –∫–æ—Å—Ç—å—é</li>
     *   <li>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</li>
     * </ol>
     *
     * @param update –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram API
     * @return —Å–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∏–≥—Ä–∞–ª—å–Ω–æ–π –∫–æ—Å—Ç—å—é
     */
    @Override
    public List<BotApiMethod<?>> processDick(Update update) {
        Integer messageId = update.getMessage().getMessageId();
        ChatDto chat = dilondoMapper.mapToChatDto(update);

        List<TopEntity> topList = dilondoRepository.findTopBy(chat.id());
        StringBuilder builder = new StringBuilder();
        builder.append("–ë–æ–ª—å—à–æ–π \uD83C\uDF46, –±–æ–ª—å—à–∏–µ \uD83E\uDD5A\uD83E\uDD5A\n");
        int pos = 1;
        for (TopEntity topEntity : topList) {
            builder.append(String.format("%d. %s : %s —Å–º", pos++, topEntity.name(),
                    topEntity.dickLength()));
            if (pos == 2) {
                builder.append(" \uD83D\uDC51 \n");
            } else {
                builder.append(" \n");
            }
        }
        SendMessage message = SendMessage.builder()
                .chatId(chat.id())
                .text(builder.toString())
                .replyToMessageId(messageId)
                .build();
        SendDice dice = SendDice.builder()
                .chatId(chat.id())
                .emoji("üé∞")
                .replyToMessageId(messageId)
                .build();

        return List.of(message, dice);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–π –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º.
     *
     * @return {@link CommandEnum#TOP}
     */
    @Override
    public CommandEnum getCommand() {
        return CommandEnum.TOP;
    }
}
